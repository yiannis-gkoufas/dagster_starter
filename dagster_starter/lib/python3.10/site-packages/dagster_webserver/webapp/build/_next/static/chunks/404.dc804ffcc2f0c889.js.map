{"version":3,"file":"static/chunks/404.dc804ffcc2f0c889.js","mappings":"uOAwBO,SAASA,wBAAyEC,CAOxF,EACC,IAAsCC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAW,iBAAM,EAAE,MAAhEC,EAA+BD,CAAAA,CAAAA,EAAAA,CAAlBE,EAAkBF,CAAAA,CAAAA,EAAAA,CACVG,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA2C,CAACC,SAAU,QAAQ,MAAnFC,EAAqBF,CAAAA,CAAAA,EAAAA,CAAbG,EAAaH,CAAAA,CAAAA,EAAAA,CAEtBI,EAAiB,GAAAC,EAAAC,CAAA,KAAAC,EAAAD,CAAA,KAClBV,EAAQY,SAAS,GACpBN,OAAAA,EACAO,MAAOb,EAAQc,QAAQ,CAAG,IAGtBC,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAAmBhB,EAAQiB,KAAK,CAAE,CACpDC,KAAMlB,EAAQkB,IAAI,CAClBN,UAAWJ,EACXW,4BAA6B,EAC/B,GAGMC,EAAyC,CAC7CC,cAAe,CAAC,CAACf,EACjBgB,cAAeC,EAHWC,cAAc,CAACT,EAAYU,IAAI,EAG9BC,MAAM,GAAK1B,EAAQc,QAAQ,CAAG,EACzDa,UAAW,WACT,IAAMC,EAAa,GAAAC,EAAAnB,CAAA,EAAGR,GACtBK,EAAUqB,EAAUE,GAAG,IACvB3B,EAAeyB,EACjB,EACAG,cAAe,WACTzB,GACFH,EAAe,SAAC6B,CAAAA,QAAY,GAAAH,EAAAnB,CAAA,EAAIsB,GAAAA,MAAAA,CAAJ,CAAa1B,EAAO,IAElD,IAAM2B,EAAalB,EAAYU,IAAI,EAAIzB,EAAQkC,mBAAmB,CAACnB,EAAYU,IAAI,EAC9EQ,GAGL1B,EAAU0B,EACZ,EACAE,MAAO,WACLhC,EAAe,EAAE,EACjBI,EAAU6B,KAAAA,EACZ,CACF,EAEA,MAAO,CAACrB,YAAAA,EAAaK,gBAAAA,CAAe,CACtC,qxDC5DO,IAAMiB,EAAuBC,SAAAA,EAAMA,CAACC,GAAG,CAAAC,UAAA,kDAGnC,SAAAC,CAAA,UAAEC,IAAAA,QAAAA,KAAAA,IAAAA,EAAO,EAAAC,GACIC,EAAAA,CAAMA,CAACC,KAAK,CAqBZD,EAAAA,CAAMA,CAACE,WAAW","sources":["webpack://_N_E/../ui-core/src/runs/useCursorPaginatedQuery.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui-components';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  skip?: boolean;\n  variables: Omit<TVars, 'cursor' | 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    skip: options.skip,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n"],"names":["useCursorPaginatedQuery","options","React","cursorStack","setCursorStack","useQueryPersistedState","queryKey","cursor","setCursor","queryVars","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_3__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_4__","variables","limit","pageSize","queryResult","useQuery","query","skip","notifyOnNetworkStatusChange","paginationProps","hasPrevCursor","hasNextCursor","resultArray","getResultArray","data","length","popCursor","nextStack","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_6__","pop","advanceCursor","current","nextCursor","nextCursorForResult","reset","undefined","StickyTableContainer","styled","div","withConfig","param","$top","_param_$top","Colors","White","KeylineGray"],"sourceRoot":""}