{"version":3,"file":"static/chunks/663.39e74360e8f050ef.js","mappings":"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","sources":["webpack://_N_E/../ui-components/src/components/Page.tsx","webpack://_N_E/../ui-components/src/components/PageHeader.tsx","webpack://_N_E/../ui-core/src/assets/AssetGroupSuggest.tsx","webpack://_N_E/../ui-core/src/asset-graph/AssetGraphExplorerFilters.tsx","webpack://_N_E/../ui-core/src/assets/AssetsGroupsGlobalGraphRoot.tsx","webpack://_N_E/../ui-core/src/assets/globalAssetGraphPathToString.tsx","webpack://_N_E/../ui-core/src/workspace/ReloadAllButton.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {IconName} from './Icon';\n\ninterface Props {\n  title: React.ReactNode;\n  tags?: React.ReactNode;\n  icon?: IconName;\n  description?: React.ReactNode;\n  metadata?: React.ReactNode;\n  right?: React.ReactNode;\n  tabs?: React.ReactNode;\n}\n\nexport const PageHeader = (props: Props) => {\n  const {title, tags, right, tabs} = props;\n  return (\n    <PageHeaderContainer\n      background={Colors.Gray50}\n      padding={{top: 16, left: 24, right: 12}}\n      border=\"bottom\"\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}} padding={{bottom: 16}}>\n        <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n          {title}\n          {tags}\n        </Box>\n        {right}\n      </Box>\n      {tabs}\n    </PageHeaderContainer>\n  );\n};\n\nconst PageHeaderContainer = styled(Box)`\n  width: 100%;\n\n  /**\n   * Blueprint breadcrumbs annoyingly have a built-in height.\n   */\n  .bp4-breadcrumbs {\n    height: auto;\n  }\n`;\n","import {Box, Checkbox, Icon, MenuItem, Suggest} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\n\nimport {AssetGroupSelector} from '../graphql/types';\nimport {ClearButton} from '../ui/ClearButton';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\ntype Asset = {\n  definition: {\n    groupName: string | null;\n    repository: {name: string; location: {name: string}};\n  } | null;\n};\n\nexport function useAssetGroupSelectorsForAssets(assets: Asset[] | undefined) {\n  return React.useMemo(\n    () =>\n      uniqBy(\n        (assets || []).map(buildAssetGroupSelector).filter((a) => !!a) as AssetGroupSelector[],\n        (a) => JSON.stringify(a),\n      ).sort((a, b) => a.groupName.localeCompare(b.groupName)),\n    [assets],\n  );\n}\n\n// We're using a <Suggest /> component because it's convenient to have typeahead behavior,\n// but we want to support mulit-selection. To achieve this, we show checkboxes on the items\n// and override the label text (\"2 groups\"). Blueprint doesn't need to know what the real\n// selection is, just that one exists.\nconst FAKE_SELECTED_ITEM: AssetGroupSelector = {\n  groupName: '-',\n  repositoryLocationName: '-',\n  repositoryName: '-',\n};\n\nexport const AssetGroupSuggest: React.FC<{\n  assetGroups: AssetGroupSelector[];\n  value: AssetGroupSelector[];\n  onChange: (g: AssetGroupSelector[]) => void;\n}> = ({assetGroups, value, onChange}) => {\n  const repoKey = (g: AssetGroupSelector) => `${g.repositoryName}@${g.repositoryLocationName}`;\n  const repoKey1 = assetGroups[0] ? repoKey(assetGroups[0]) : '';\n  const repoContextNeeded = !assetGroups.every((g) => repoKey1 === repoKey(g));\n\n  return (\n    <Suggest<AssetGroupSelector>\n      selectedItem={value.length ? FAKE_SELECTED_ITEM : null}\n      items={assetGroups}\n      menuWidth={300}\n      inputProps={{\n        style: {width: 200},\n        placeholder: 'Filter asset groups…',\n        rightElement: value.length ? (\n          <ClearButton onClick={() => onChange([])} style={{marginTop: 5, marginRight: 4}}>\n            <Icon name=\"cancel\" />\n          </ClearButton>\n        ) : undefined,\n      }}\n      inputValueRenderer={() =>\n        value.length === 1 ? value[0]!.groupName : value.length > 1 ? `${value.length} groups` : ``\n      }\n      itemPredicate={(query, partition) =>\n        query.length === 0 || partition.groupName.toLowerCase().includes(query.toLowerCase())\n      }\n      itemsEqual={isEqual}\n      itemRenderer={(assetGroup, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          onClick={props.handleClick}\n          key={JSON.stringify(assetGroup)}\n          text={\n            <Box\n              flex={{direction: 'row', gap: 6, alignItems: 'center'}}\n              margin={{left: 4}}\n              style={{maxWidth: '500px'}}\n            >\n              <Checkbox checked={value.some((g) => isEqual(g, assetGroup))} size=\"small\" readOnly />\n              <Box\n                flex={{direction: 'row', alignItems: 'center', grow: 1, shrink: 1}}\n                style={{overflow: 'hidden'}}\n              >\n                <div style={{overflow: 'hidden'}}>\n                  {assetGroup.groupName}\n                  {repoContextNeeded ? (\n                    <span style={{opacity: 0.5, paddingLeft: 4}}>\n                      {buildRepoPathForHuman(\n                        assetGroup.repositoryName,\n                        assetGroup.repositoryLocationName,\n                      )}\n                    </span>\n                  ) : undefined}\n                </div>\n              </Box>\n            </Box>\n          }\n        />\n      )}\n      noResults={<MenuItem disabled={true} text=\"No asset groups\" />}\n      closeOnSelect={false}\n      resetOnQuery={false}\n      onItemSelect={(item) => {\n        const nextValue = value.filter((g) => !isEqual(item, g));\n        if (nextValue.length === value.length) {\n          nextValue.push(item);\n        }\n        onChange(nextValue);\n      }}\n    />\n  );\n};\n\nexport function buildAssetGroupSelector(a: Asset) {\n  return a.definition && a.definition.groupName\n    ? {\n        groupName: a.definition.groupName,\n        repositoryName: a.definition.repository.name,\n        repositoryLocationName: a.definition.repository.location.name,\n      }\n    : null;\n}\n","import {Box, Icon} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {AssetGroupSelector} from '../graphql/types';\nimport {TruncatedTextWithFullTextOnHover} from '../nav/getLeftNavItemsForOption';\nimport {useFilters} from '../ui/Filters';\nimport {FilterObject} from '../ui/Filters/useFilter';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\nimport {DagsterRepoOption, WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress, buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\nexport const AssetGraphExplorerFilters = React.memo(\n  ({\n    assetGroups,\n    visibleAssetGroups,\n    setGroupFilters,\n  }:\n    | {\n        assetGroups: AssetGroupSelector[];\n        visibleAssetGroups: AssetGroupSelector[];\n        setGroupFilters: (groups: AssetGroupSelector[]) => void;\n      }\n    | {assetGroups?: null; setGroupFilters?: null; visibleAssetGroups?: null}) => {\n    const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n\n    const visibleReposSet = React.useMemo(() => new Set(visibleRepos), [visibleRepos]);\n\n    const reposFilter = useStaticSetFilter<DagsterRepoOption>({\n      name: 'Code location',\n      icon: 'repo',\n      allValues: allRepos.map((repo) => ({\n        key: repo.repository.id,\n        value: repo,\n        match: [buildRepoPathForHuman(repo.repository.name, repo.repositoryLocation.name)],\n      })),\n      menuWidth: '300px',\n      renderLabel: ({value}) => (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"repo\" />\n          <TruncatedTextWithFullTextOnHover\n            text={buildRepoPathForHuman(value.repository.name, value.repositoryLocation.name)}\n          />\n        </Box>\n      ),\n      getStringValue: (value) =>\n        buildRepoPathForHuman(value.repository.name, value.repositoryLocation.name),\n      initialState: visibleReposSet,\n      onStateChanged: (values) => {\n        allRepos.forEach((repo) => {\n          if (visibleReposSet.has(repo) !== values.has(repo)) {\n            toggleVisible([buildRepoAddress(repo.repository.name, repo.repositoryLocation.name)]);\n          }\n        });\n      },\n    });\n\n    const groupsFilter = useStaticSetFilter<AssetGroupSelector>({\n      name: 'Asset Groups',\n      icon: 'asset_group',\n      allValues: (assetGroups || []).map((group) => ({\n        key: group.groupName,\n        value:\n          visibleAssetGroups?.find(\n            (visibleGroup) =>\n              visibleGroup.groupName === group.groupName &&\n              visibleGroup.repositoryName === group.repositoryName &&\n              visibleGroup.repositoryLocationName === group.repositoryLocationName,\n          ) ?? group,\n        match: [group.groupName],\n      })),\n      menuWidth: '300px',\n      renderLabel: ({value}) => (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"repo\" />\n          <TruncatedTextWithFullTextOnHover\n            tooltipText={\n              value.groupName +\n              ' - ' +\n              buildRepoPathForHuman(value.repositoryName, value.repositoryLocationName)\n            }\n            text={\n              <>\n                {value.groupName}\n                <span style={{opacity: 0.5, paddingLeft: '4px'}}>\n                  {buildRepoPathForHuman(value.repositoryName, value.repositoryLocationName)}\n                </span>\n              </>\n            }\n          />\n        </Box>\n      ),\n      getStringValue: (group) => group.groupName,\n      initialState: React.useMemo(() => new Set(visibleAssetGroups ?? []), [visibleAssetGroups]),\n      onStateChanged: (values) => {\n        if (setGroupFilters) {\n          setGroupFilters(Array.from(values));\n        }\n      },\n    });\n\n    const filters: FilterObject[] = [];\n    if (allRepos.length > 1) {\n      filters.push(reposFilter);\n    }\n    if (assetGroups) {\n      filters.push(groupsFilter);\n    }\n    const {button} = useFilters({filters});\n    if (allRepos.length <= 1 && !assetGroups) {\n      return null;\n    }\n    return button;\n  },\n);\n","import {Page, PageHeader, Heading} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetGraphExplorerFilters} from '../asset-graph/AssetGraphExplorerFilters';\nimport {AssetGraphFetchScope} from '../asset-graph/useAssetGraphData';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nimport {buildAssetGroupSelector} from './AssetGroupSuggest';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {\n  globalAssetGraphPathFromString,\n  globalAssetGraphPathToString,\n} from './globalAssetGraphPathToString';\n\ninterface AssetGroupRootParams {\n  0: string;\n}\n\nexport const AssetsGroupsGlobalGraphRoot: React.FC = () => {\n  const {0: path} = useParams<AssetGroupRootParams>();\n  const {visibleRepos} = React.useContext(WorkspaceContext);\n  const history = useHistory();\n\n  const [filters, setFilters] = useQueryPersistedState<{groups: AssetGroupSelector[]}>({\n    encode: ({groups}) => ({groups: JSON.stringify(groups)}),\n    decode: (qs) => ({groups: qs.groups ? JSON.parse(qs.groups) : []}),\n  });\n\n  useDocumentTitle(`Global Asset Lineage`);\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode]({\n        pathname: globalAssetGraphPathToString(path),\n        search: history.location.search,\n      });\n    },\n    [history],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n    },\n    [history],\n  );\n\n  const fetchOptions = React.useMemo(() => {\n    const options: AssetGraphFetchScope = {\n      hideEdgesToNodesOutsideQuery: false,\n      hideNodesMatching: (node) => {\n        if (\n          !visibleRepos.some(\n            (repo) =>\n              repo.repositoryLocation.name === node.repository.location.name &&\n              repo.repository.name === node.repository.name,\n          )\n        ) {\n          return true;\n        }\n        if (filters.groups?.length) {\n          const nodeGroup = buildAssetGroupSelector({definition: node});\n          if (!filters.groups.some((g) => isEqual(g, nodeGroup))) {\n            return true;\n          }\n        }\n\n        return false;\n      },\n    };\n    return options;\n  }, [filters.groups, visibleRepos]);\n\n  const assetGroups: AssetGroupSelector[] = React.useMemo(() => {\n    return visibleRepos.flatMap((repo) =>\n      repo.repository.assetGroups.map((g) => ({\n        groupName: g.groupName,\n        repositoryLocationName: repo.repositoryLocation.name,\n        repositoryName: repo.repository.name,\n      })),\n    );\n  }, [visibleRepos]);\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>Global Asset Lineage</Heading>}\n        right={<ReloadAllButton label=\"Reload definitions\" />}\n      />\n      <AssetGraphExplorer\n        fetchOptions={fetchOptions}\n        fetchOptionFilters={\n          <AssetGraphExplorerFilters\n            assetGroups={assetGroups}\n            visibleAssetGroups={React.useMemo(() => filters.groups || [], [filters.groups])}\n            setGroupFilters={React.useCallback(\n              (groups) => setFilters({...filters, groups}),\n              [filters, setFilters],\n            )}\n          />\n        }\n        options={{preferAssetRendering: true, explodeComposites: true}}\n        explorerPath={globalAssetGraphPathFromString(path)}\n        onChangeExplorerPath={onChangeExplorerPath}\n        onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n      />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default AssetsGroupsGlobalGraphRoot;\n","import {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\n\n// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\nconst URL_MAX_LENGTH = 32000;\nconst __GLOBAL__ = '__GLOBAL__';\n\nexport function globalAssetGraphPathToString(path: Omit<ExplorerPath, 'pipelineName'>) {\n  const str = explorerPathToString({...path, pipelineName: __GLOBAL__}).replace(__GLOBAL__, '');\n  return `/asset-groups${str}`;\n}\n\nexport function globalAssetGraphPathFromString(pathName: string) {\n  return explorerPathFromString(__GLOBAL__ + pathName || '/');\n}\n\nexport function globalAssetGraphPathForAssetsAndDescendants(assetKeys: AssetKeyInput[]) {\n  // In a perfect world we populate ops query to \"asset1*,asset2*\" and then select the roots\n  // by passing opNames. If we don't have enough characters to do both, just populate the ops\n  // query. It might still be too long, but we tried.\n  const opsQuery = assetKeys.map((a) => `${tokenForAssetKey(a)}*`).join(', ');\n  const opNames =\n    opsQuery.length > URL_MAX_LENGTH / 2 ? [] : [assetKeys.map(tokenForAssetKey).join(',')];\n  return globalAssetGraphPathToString({opNames, opsQuery});\n}\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {\n    permissions: {canReloadWorkspace},\n    disabledReasons,\n  } = useUnscopedPermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace) {\n    return (\n      <Tooltip content={disabledReasons.canReloadWorkspace}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n"],"names":["Page","styled","div","withConfig","PageHeader","props","title","tags","right","tabs","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","PageHeaderContainer","background","Colors","Gray50","padding","top","left","border","Box","flex","direction","justifyContent","bottom","alignItems","gap","wrap","useAssetGroupSelectorsForAssets","assets","React","uniqBy","map","buildAssetGroupSelector","filter","a","JSON","stringify","sort","b","groupName","localeCompare","FAKE_SELECTED_ITEM","repositoryLocationName","repositoryName","AssetGroupSuggest","param","assetGroups","value","onChange","repoKey","g","concat","repoKey1","repoContextNeeded","every","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Suggest","selectedItem","length","items","menuWidth","inputProps","style","width","placeholder","rightElement","ClearButton","onClick","marginTop","marginRight","Icon","name","undefined","inputValueRenderer","itemPredicate","query","partition","toLowerCase","includes","itemsEqual","isEqual","itemRenderer","assetGroup","MenuItem","active","modifiers","handleClick","text","margin","maxWidth","Checkbox","checked","some","size","readOnly","grow","shrink","overflow","span","opacity","paddingLeft","buildRepoPathForHuman","noResults","disabled","closeOnSelect","resetOnQuery","onItemSelect","item","nextValue","push","definition","repository","location","AssetGraphExplorerFilters","visibleAssetGroups","setGroupFilters","WorkspaceContext","allRepos","visibleRepos","toggleVisible","visibleReposSet","Set","reposFilter","useStaticSetFilter","icon","allValues","repo","key","id","match","repositoryLocation","renderLabel","jsx_runtime","TruncatedTextWithFullTextOnHover","getStringValue","initialState","onStateChanged","values","forEach","has","buildRepoAddress","groupsFilter","group","find","visibleGroup","tooltipText","Fragment","Array","from","filters","button","useFilters","AssetsGroupsGlobalGraphRoot","path","useParams","history","useHistory","useQueryPersistedState","encode","groups","decode","qs","parse","setFilters","useDocumentTitle","onChangeExplorerPath","mode","pathname","globalAssetGraphPathToString","search","onNavigateToSourceAssetNode","node","assetDetailsPathForKey","assetKey","view","fetchOptions","hideEdgesToNodesOutsideQuery","hideNodesMatching","nodeGroup","flatMap","display","flexDirection","paddingBottom","Heading","ReloadAllButton","label","AssetGraphExplorer","fetchOptionFilters","_object_spread_props","_","_object_spread","options","preferAssetRendering","explodeComposites","explorerPath","globalAssetGraphPathFromString","assets_AssetsGroupsGlobalGraphRoot","__GLOBAL__","str","explorerPathToString","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_2__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_3__","pipelineName","replace","pathName","explorerPathFromString","globalAssetGraphPathForAssetsAndDescendants","assetKeys","opsQuery","tokenForAssetKey","join","opNames","URL_MAX_LENGTH","_param_label","useUnscopedPermissions","permissions","canReloadWorkspace","disabledReasons","useRepositoryLocationReload","scope","reloadFn","reloadFnForWorkspace","reloading","tryReload","error","errorLocationId","isOpen","setIsOpen","Button","loading","intent","RepositoryLocationErrorDialog","onTryReload","onDismiss","Dialog","canEscapeKeyClose","canOutsideClickClose","DialogBody","PythonErrorInfo","DialogFooter","Tooltip","content"],"sourceRoot":""}