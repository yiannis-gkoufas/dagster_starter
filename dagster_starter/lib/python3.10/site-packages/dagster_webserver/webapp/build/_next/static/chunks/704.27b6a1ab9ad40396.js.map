{"version":3,"file":"static/chunks/704.27b6a1ab9ad40396.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  PageHeader,\n  Heading,\n  Box,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {doneStatuses} from '../runs/RunStatuses';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {RunTableRunFragment} from '../runs/types/RunTable.types';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  ConcurrencyLimitFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  FreeConcurrencySlotsForRunMutation,\n  FreeConcurrencySlotsForRunMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst RUNS_LIMIT = 25;\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  const content = data ? (\n    flagInstanceConcurrencyLimits ? (\n      <ConcurrencyLimits\n        instanceConfig={data.instance.info}\n        limits={data.instance.concurrencyLimits}\n        hasSupport={data.instance.supportsConcurrencyLimits}\n        refetch={queryResult.refetch}\n      />\n    ) : (\n      <Redirect to=\"/config\" />\n    )\n  ) : (\n    <Box padding={{vertical: 64}}>\n      <Spinner purpose=\"section\" />\n    </Box>\n  );\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      {content}\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const ConcurrencyLimits: React.FC<{\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n}> = ({instanceConfig, hasSupport, limits, refetch}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedRuns, setSelectedRuns] = React.useState<string[] | undefined>(undefined);\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onRunsDialogClose = React.useCallback(() => {\n    setSelectedRuns(undefined);\n    setSelectedKey(undefined);\n  }, [setSelectedKey, setSelectedRuns]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not support global concurrency limits. You will need to ' +\n            'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n            'feature.'\n          }\n        />\n      </Box>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <Box margin={24}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No concurrency support\"\n          description={\n            'This instance does not currently support global concurrency limits. You may need to ' +\n            'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n            'to support this feature.'\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box>\n        <Box flex={{justifyContent: 'flex-end'}} padding={16}>\n          <Button intent=\"primary\" icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n            Add concurrency limit\n          </Button>\n        </Box>\n        {limits.length === 0 ? (\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: '260px'}}>Concurrency key</th>\n                <th style={{width: '20%'}}>Occupied slots</th>\n                <th style={{width: '20%'}}>Total slots</th>\n                <th>Active runs</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {limits.map((limit) => (\n                <tr key={limit.concurrencyKey}>\n                  <td>{limit.concurrencyKey}</td>\n                  <td>{limit.activeSlotCount}</td>\n                  <td>{limit.slotCount}</td>\n                  <td>\n                    {limit.activeRunIds.length === 0 ? (\n                      <>&mdash;</>\n                    ) : (\n                      <Tag intent=\"primary\" interactive>\n                        <ButtonLink\n                          onClick={() => {\n                            setSelectedKey(limit.concurrencyKey);\n                            setSelectedRuns(limit.activeRunIds);\n                          }}\n                        >\n                          {limit.activeRunIds.length}{' '}\n                          {limit.activeRunIds.length === 1 ? 'run' : 'runs'}\n                        </ButtonLink>\n                      </Tag>\n                    )}\n                  </td>\n                  <td>\n                    <ConcurrencyLimitActionMenu\n                      concurrencyKey={limit.concurrencyKey}\n                      onEdit={onEdit}\n                      onDelete={onDelete}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Box>\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyRunsDialog\n        title={\n          <span>\n            Active runs for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onRunsDialogClose}\n        runIds={selectedRuns}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitActionMenu: React.FC<{\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}> = ({concurrencyKey, onDelete, onEdit}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog: React.FC<{\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyRunsDialog: React.FC<{\n  runIds?: string[];\n  title: string | React.ReactNode;\n  onClose: () => void;\n}> = ({runIds, onClose, title}) => {\n  const {data} = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          runIds: runIds || [],\n        },\n      },\n      skip: !runIds || !runIds.length,\n    },\n  );\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsForRunMutation,\n    FreeConcurrencySlotsForRunMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION);\n\n  const freeSlotsActionMenuItem = React.useCallback(\n    (run: RunTableRunFragment) => {\n      return doneStatuses.has(run.status)\n        ? [\n            <MenuItem\n              key=\"free-concurrency-slots\"\n              icon=\"status\"\n              text=\"Free concurrency slots for run\"\n              onClick={async () => {\n                const resp = await freeSlots({variables: {runId: run.id}});\n                if (resp.data?.freeConcurrencySlotsForRun) {\n                  await showSharedToaster({\n                    intent: 'success',\n                    icon: 'copy_to_clipboard_done',\n                    message: 'Freed concurrency slots',\n                  });\n                }\n                onClose();\n              }}\n            />,\n          ]\n        : [];\n    },\n    [freeSlots, onClose],\n  );\n\n  return (\n    <Dialog\n      isOpen={!!runIds && runIds.length > 0}\n      title={title}\n      onClose={onClose}\n      style={{minWidth: '400px', maxWidth: 'calc(100% - 40px)', width: 'fit-content'}}\n    >\n      <Box padding={{vertical: 16}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : data.pipelineRunsOrError.__typename === 'Runs' ? (\n          <div style={{overflow: 'auto'}}>\n            <RunTable\n              runs={data.pipelineRunsOrError.results}\n              additionalActionsForRun={freeSlotsActionMenuItem}\n            />\n          </div>\n        ) : (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"error\"\n              title=\"Query Error\"\n              description={\n                data.pipelineRunsOrError.__typename === 'PythonError'\n                  ? data.pipelineRunsOrError.message\n                  : 'There was a problem querying for these runs.'\n              }\n            />\n            ;\n          </Box>\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    activeRunIds\n    activeSlotCount\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION = gql`\n  mutation FreeConcurrencySlotsForRun($runId: String!) {\n    freeConcurrencySlotsForRun(runId: $runId)\n  }\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig && flagInstanceConcurrencyLimits ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["InstanceConcurrencyPage","React","useTrackPageView","useDocumentTitle","flagInstanceConcurrencyLimits","useFeatureFlags","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","content","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","ConcurrencyLimits","instanceConfig","instance","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","Redirect","to","Box","padding","vertical","Spinner","purpose","jsxs","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","__webpack_exports__","param","action","setAction","undefined","selectedRuns","setSelectedRuns","selectedKey","setSelectedKey","onRunsDialogClose","limitsByKey","Object","fromEntries","map","concurrencyKey","slotCount","onAdd","actionType","onEdit","concurrencyLimit","onDelete","includes","margin","NonIdealState","icon","description","Fragment","flex","justifyContent","Button","intent","Icon","name","onClick","length","ButtonLink","Table","thead","tr","th","style","width","tbody","limit","td","activeSlotCount","activeRunIds","Tag","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyRunsDialog","span","strong","runIds","Popover","Menu","MenuItem","text","position","isValidLimit","value","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_30__","_","variables","_state","sent","Dialog","isOpen","DialogBody","bottom","TextInput","onChange","e","target","placeholder","DialogFooter","disabled","Mono","RUNS_FOR_CONCURRENCY_KEY_QUERY","filter","skip","freeSlots","FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION","freeSlotsActionMenuItem","run","doneStatuses","has","status","resp","runId","id","freeConcurrencySlotsForRun","showSharedToaster","message","minWidth","maxWidth","pipelineRunsOrError","__typename","div","overflow","RunTable","runs","results","additionalActionsForRun","CONCURRENCY_LIMIT_FRAGMENT","gql","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","modifiers","offset","enabled","options","color","Colors","Yellow500","WorkspaceStatus","codeLocations","type","Tooltip","placement","fillColor","Gray300","props","healthTitle","canSeeConfig","useCanSeeConfig","direction","alignItems","Tabs","selectedTabId","TabLink","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}