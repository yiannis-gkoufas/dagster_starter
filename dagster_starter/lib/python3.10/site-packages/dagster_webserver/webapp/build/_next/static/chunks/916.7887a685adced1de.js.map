{"version":3,"file":"static/chunks/916.7887a685adced1de.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/instigation/Unloadable.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {QueryResult} from '@apollo/client';\nimport {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useAutomaterializeDaemonStatus} from '../assets/AutomaterializeDaemonStatusTag';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink\n          id=\"amp\"\n          title={\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <div>Auto-materialize</div>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <div\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    borderRadius: '50%',\n                    backgroundColor:\n                      automaterialize.paused === false ? Colors.Blue200 : Colors.Gray200,\n                  }}\n                />\n              )}\n            </Box>\n          }\n          to=\"/overview/automaterialize\"\n        />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Body2,\n  Box,\n  ButtonGroup,\n  ButtonLink,\n  Checkbox,\n  CursorHistoryControls,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: React.useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n            ],\n      );\n    }, []),\n    encode: React.useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: React.useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <ButtonGroup\n            activeItems={new Set(['evaluations'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n          {!queryResult.data ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.STARTED}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SUCCESS}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.FAILURE}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SKIPPED}\n          />\n        </Box>\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {(queryResult.data || queryResult.previousData)?.autoMaterializeTicks.map(\n            (tick, index) => {\n              // This is a hack for ticks that get stuck in started\n              const isTickStuckInStartedState =\n                index !== 0 &&\n                tick.status === InstigationTickStatus.STARTED &&\n                !paginationProps.hasPrevCursor;\n\n              return (\n                <tr key={tick.id}>\n                  <td>\n                    <Timestamp\n                      timestamp={{unix: tick.timestamp}}\n                      timeFormat={{showTimezone: true}}\n                    />\n                  </td>\n                  <td>\n                    <TickStatusTag tick={tick} isStuckStarted={isTickStuckInStartedState} />\n                  </td>\n                  <td>\n                    {isTickStuckInStartedState ? (\n                      ' - '\n                    ) : (\n                      <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                    )}\n                  </td>\n                  <td>\n                    {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                      tick.status,\n                    ) ? (\n                      <ButtonLink\n                        onClick={() => {\n                          setSelectedTick(tick);\n                        }}\n                      >\n                        <Body2>\n                          {tick.requestedAssetMaterializationCount} materializations requested\n                        </Body2>\n                      </ButtonLink>\n                    ) : (\n                      ' - '\n                    )}\n                  </td>\n                </tr>\n              );\n            },\n          )}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nconst StatusLabels = {\n  [InstigationTickStatus.SKIPPED]: 'None requested',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n};\n\nfunction StatusCheckbox({\n  status,\n  statuses,\n  setStatuses,\n}: {\n  status: InstigationTickStatus;\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n}) {\n  return (\n    <Checkbox\n      label={StatusLabels[status]}\n      checked={statuses.has(status)}\n      onChange={() => {\n        const newStatuses = new Set(statuses);\n        if (statuses.has(status)) {\n          newStatuses.delete(status);\n        } else {\n          newStatuses.add(status);\n        }\n        setStatuses(newStatuses);\n      }}\n    />\n  );\n}\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Subtitle2, Caption, Icon, Spinner} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {AssetKeyInput, InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {HeaderCell, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../../workspace/workspacePath';\nimport {AssetLink} from '../AssetLink';\nimport {\n  AssetKeysDialog,\n  AssetKeysDialogHeader,\n  AssetKeysDialogEmptyState,\n} from '../AutoMaterializePolicyPage/AssetKeysDialog';\nimport {assetDetailsPathForKey} from '../assetDetailsPathForKey';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/AutomaterializationTickDetailDialog.types';\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const AutomaterializationTickDetailDialog = React.memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    const [queryString, setQueryString] = React.useState('');\n\n    const filteredAssetKeys = React.useMemo(\n      () =>\n        tick\n          ? tick.requestedAssetKeys.filter((assetKey) =>\n              assetKey.path.join('/').includes(queryString),\n            )\n          : [],\n      [tick, queryString],\n    );\n\n    const count = tick?.requestedAssetKeys.length || 0;\n\n    const parentRef = React.useRef<HTMLDivElement | null>(null);\n    const rowVirtualizer = useVirtualizer({\n      count: filteredAssetKeys.length,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 34,\n      overscan: 10,\n    });\n    const totalHeight = rowVirtualizer.getTotalSize();\n    const items = rowVirtualizer.getVirtualItems();\n\n    const assetKeyToPartitionsMap = React.useMemo(() => {\n      const map: Record<string, string[]> = {};\n      tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n        map[tokenForAssetKey(assetKey)] = partitionKeys;\n      });\n      return map;\n    }, [tick?.requestedMaterializationsForAssets]);\n\n    const content = React.useMemo(() => {\n      if (queryString && !filteredAssetKeys.length) {\n        return (\n          <AssetKeysDialogEmptyState\n            title=\"No matching asset keys\"\n            description={\n              <>\n                No matching asset keys for <strong>{queryString}</strong>\n              </>\n            }\n          />\n        );\n      }\n      if (!tick?.requestedAssetKeys.length) {\n        return (\n          <Box padding={{vertical: 12, horizontal: 24}}>\n            <Caption color={Colors.Gray700}>None</Caption>\n          </Box>\n        );\n      }\n      return (\n        <div style={{overflow: 'scroll'}} ref={parentRef}>\n          <Box\n            border=\"top-and-bottom\"\n            style={{\n              display: 'grid',\n              gridTemplateColumns: TEMPLATE_COLUMNS,\n              height: '32px',\n              fontSize: '12px',\n              color: Colors.Gray600,\n              position: 'sticky',\n              top: 0,\n              zIndex: 1,\n              background: Colors.White,\n            }}\n          >\n            <HeaderCell>Asset</HeaderCell>\n            <HeaderCell>Group</HeaderCell>\n            <HeaderCell>Result</HeaderCell>\n          </Box>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const assetKey = filteredAssetKeys[index]!;\n              return (\n                <AssetDetailRow\n                  key={key}\n                  $height={size}\n                  $start={start}\n                  assetKey={assetKey}\n                  partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                  evaluationId={tick.autoMaterializeAssetEvaluationId!}\n                />\n              );\n            })}\n          </Inner>\n        </div>\n      );\n    }, [assetKeyToPartitionsMap, filteredAssetKeys, items, queryString, tick, totalHeight]);\n\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <AssetKeysDialogHeader\n            title={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n            showSearch={count > 0}\n            placeholder=\"Filter by asset key…\"\n            queryString={queryString}\n            setQueryString={setQueryString}\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <>\n                <Box\n                  padding={{vertical: 12, horizontal: 24}}\n                  border={filteredAssetKeys.length > 0 ? undefined : 'bottom'}\n                >\n                  <Subtitle2>Materializations requested</Subtitle2>\n                </Box>\n                {content}\n              </>\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: number;\n}) => {\n  const numMaterializations = partitionKeys?.length || 1;\n  const {data} = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.Gray400} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.Gray400}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          <Link\n            to={assetDetailsPathForKey(assetKey, {\n              view: 'auto-materialize-history',\n              evaluation: `${evaluationId}`,\n            })}\n          >\n            {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'} requested\n          </Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {ButtonGroup, Box, CursorHistoryControls} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {RunTable} from '../../runs/RunTable';\nimport {RUNS_ROOT_QUERY} from '../../runs/RunsRoot';\nimport {RunsRootQuery, RunsRootQueryVariables} from '../../runs/types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  setTableView,\n}: {\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [{key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {useLazyQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Page,\n  Colors,\n  Checkbox,\n  Spinner,\n  Subtitle2,\n  Heading,\n  PageHeader,\n  Table,\n} from '@dagster-io/ui-components';\nimport React, {useLayoutEffect} from 'react';\n\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isOldTickWithoutEndtimestamp} from '../../instigation/util';\nimport {OverviewTabs} from '../../overview/OverviewTabs';\nimport {useAutomaterializeDaemonStatus} from '../AutomaterializeDaemonStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const AutomaterializationRoot = () => {\n  useTrackPageView();\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n  const [isPaused, setIsPaused] = React.useState(false);\n  const [statuses, setStatuses] = React.useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = React.useState<undefined | [number, number]>(undefined);\n  const variables: AssetDaemonTicksQueryVariables = React.useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {\n      afterTimestamp: (Date.now() - TWENTY_MINUTES) / 1000,\n    };\n  }, [statuses, timeRange]);\n  function fetchData() {\n    fetch({\n      variables,\n    });\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(fetchData, [variables]);\n  useQueryRefreshAtInterval(queryResult, 2 * 1000, !isPaused && !timeRange && !statuses, fetchData);\n\n  const [selectedTick, setSelectedTick] = React.useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    React.useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const ids = data ? data.autoMaterializeTicks.map((tick) => `${tick.id}:${tick.status}`) : [];\n  while (ids.length < 100) {\n    // Super hacky but we need to keep the memo args length the same...\n    // And the memo below prevents us from changing the ticks reference every second\n    // which avoids a bunch of re-rendering\n    ids.push('');\n  }\n  const ticks = React.useMemo(\n    () => {\n      const ticks = data?.autoMaterializeTicks;\n      return (\n        ticks?.map((tick, index) => {\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (index !== 0 && !isOldTickWithoutEndtimestamp(tick) && !tick.endTimestamp) {\n            const copy = {...tick};\n            copy.endTimestamp = ticks[index - 1]!.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...ids.slice(0, 100)],\n  );\n  const onHoverTick = React.useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"amp\" />} />\n      <Box\n        padding={{vertical: 12, horizontal: 24}}\n        flex={{direction: 'column', gap: 12}}\n        background={Colors.Gray50}\n      >\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box padding={{vertical: 48}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            key={selectedTick?.id}\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <AutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Page,\n  PageHeader,\n  Colors,\n  Box,\n  Tag,\n  Table,\n  Spinner,\n  Dialog,\n  Button,\n  DialogFooter,\n  ButtonLink,\n  NonIdealState,\n  Heading,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../../ui/formatters';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n  PartitionBackfillFragment,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const linkQuery = () => {\n      if (backfill.assetBackfillData?.rootAssetTargetedRanges?.length === 1) {\n        const ranges = backfill.assetBackfillData?.rootAssetTargetedRanges;\n        if (ranges?.length) {\n          const {start, end} = ranges[0]!;\n          return {default_range: `[${start}...${end}]`};\n        }\n      }\n      return undefined;\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <PartitionSelection\n                numPartitions={backfill.numPartitions || 0}\n                rootAssetTargetedPartitions={\n                  backfill.assetBackfillData?.rootAssetTargetedPartitions\n                }\n                rootAssetTargetedRanges={backfill.assetBackfillData?.rootAssetTargetedRanges}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <Link to={assetDetailsPathForKey(asset.assetKey, linkQuery())}>\n                          {asset.assetKey.path.join('/')}\n                        </Link>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootAssetTargetedRanges {\n        start\n        end\n      }\n      rootAssetTargetedPartitions\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\n\ntype AssetBackfillData = Extract<\n  PartitionBackfillFragment['assetBackfillData'],\n  {__typename: 'AssetBackfillData'}\n>;\n\nexport const PartitionSelection = ({\n  numPartitions,\n  rootAssetTargetedRanges,\n  rootAssetTargetedPartitions,\n}: {\n  numPartitions: number;\n  rootAssetTargetedRanges?: AssetBackfillData['rootAssetTargetedRanges'];\n  rootAssetTargetedPartitions?: AssetBackfillData['rootAssetTargetedPartitions'];\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  if (rootAssetTargetedPartitions) {\n    if (rootAssetTargetedPartitions.length <= 3) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n          {rootAssetTargetedPartitions.map((p) => (\n            <Tag key={p}>{p}</Tag>\n          ))}\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <ButtonLink onClick={() => setIsDialogOpen(true)}>\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n        <Dialog\n          isOpen={isDialogOpen}\n          title={`Partition selection (${rootAssetTargetedPartitions.length})`}\n          onClose={() => setIsDialogOpen(false)}\n        >\n          <div style={{height: '340px', overflow: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              items={[...rootAssetTargetedPartitions].sort((a, b) => COLLATOR.compare(a, b))}\n              renderItem={(assetKey) => (\n                <div key={assetKey}>\n                  <TruncatedTextWithFullTextOnHover text={assetKey} />\n                </div>\n              )}\n            />\n          </div>\n          <DialogFooter topBorder>\n            <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n          </DialogFooter>\n        </Dialog>\n      </>\n    );\n  }\n\n  if (rootAssetTargetedRanges) {\n    if (rootAssetTargetedRanges?.length === 1) {\n      const {start, end} = rootAssetTargetedRanges[0]!;\n      return (\n        <div>\n          {start}...{end}\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <ButtonLink onClick={() => setIsDialogOpen(true)}>\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n        <Dialog\n          isOpen={isDialogOpen}\n          title={`Partition selection (${rootAssetTargetedRanges?.length})`}\n          onClose={() => setIsDialogOpen(false)}\n        >\n          <div style={{height: '340px', overflow: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              items={rootAssetTargetedRanges || []}\n              renderItem={({start, end}) => {\n                return <div key={`${start}:${end}`}>{`${start}...${end}`}</div>;\n              }}\n            />\n          </div>\n          <DialogFooter topBorder>\n            <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n          </DialogFooter>\n        </Dialog>\n      </>\n    );\n  }\n\n  return <div>{numPartitions === 1 ? '1 partition' : `${numPartitions} partitions`}</div>;\n};\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: Colors.White,\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = (typeof group)['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => tokenForAssetKey(asset.key) === key);\n      if (!asset?.definition) {\n        console.warn('Expected a definition for asset with key', key);\n        return;\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: asset.key,\n        definition: asset.definition,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.Gray500}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.Green500,\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.Gray900}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.Gray600};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.Gray700}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Colors,\n  Group,\n  Table,\n  Subheading,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickStatusTag tick={latestTick} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>{latestTick ? <TickStatusTag tick={latestTick} /> : null}</td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/automaterialize\">\n        <AutomaterializationRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["_obj","OverviewTabs","props","refreshState","tab","automaterialize","useAutomaterializeDaemonStatus","jsx_runtime","jsxs","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","jsx","TabLink","id","title","to","gap","div","loading","Spinner","purpose","style","width","height","borderRadius","backgroundColor","paused","Colors","Blue200","Gray200","padding","bottom","QueryRefreshCountdown","ASSET_DAEMON_TICKS_QUERY","gql","PYTHON_ERROR_FRAGMENT","AutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","React","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","variables","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","start","timestamp","end","endTimestamp","undefined","vertical","horizontal","margin","top","border","ButtonGroup","activeItems","buttons","label","onClick","StatusCheckbox","status","SKIPPED","TableWrapper","thead","tr","th","tbody","previousData","_this","map","tick","index","isTickStuckInStartedState","td","Timestamp","unix","timeFormat","showTimezone","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","includes","ButtonLink","Body2","requestedAssetMaterializationCount","paddingBottom","CursorHistoryControls","StatusLabels","_define_property","_","Checkbox","checked","has","onChange","newStatuses","delete","add","styled","Table","TEMPLATE_COLUMNS","AutomaterializationTickDetailDialog","isOpen","close","queryString","setQueryString","filteredAssetKeys","requestedAssetKeys","filter","assetKey","path","join","count","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","content","AssetKeysDialogEmptyState","description","Fragment","strong","overflow","ref","display","gridTemplateColumns","fontSize","color","Gray600","position","zIndex","background","White","HeaderCell","Inner","$totalHeight","key","size","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","Caption","Gray700","AssetKeysDialog","setIsOpen","header","AssetKeysDialogHeader","showSearch","placeholder","gridTemplateRows","TickDetailSummary","Subtitle2","numMaterializations","useQuery","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","__typename","definition","repoAddress","buildRepoAddress","repository","name","location","Row","RowGrid","RowCell","AssetLink","icon","textStyle","groupName","Link","workspacePathFromAddress","concat","Icon","Gray400","assetDetailsPathForKey","view","evaluation","AutomaterializeRunHistoryTable","runs","pipelineRunsOrError","results","tags","value","RUNS_ROOT_QUERY","runData","Wrapper","RunTable","withConfig","AutomaterializationRoot","fetchData","fetch","useTrackPageView","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useLazyQuery","isPaused","setIsPaused","timeRange","afterTimestamp","beforeTimestamp","Date","now","TWENTY_MINUTES","useLayoutEffect","selectedTick","cursor","tableView","ids","push","isOldTickWithoutEndtimestamp","copy","_object_spread","_to_consumable_array","slice","onHoverTick","Page","PageHeader","Heading","tabs","Gray50","Alert","intent","a","href","target","rel","format","disabled","_async_to_generator","e","_state","sent","setPaused","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","InstanceBackfills","useDocumentTitle","queryData","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","BACKFILLS_QUERY","result","partitionBackfillsOrError","FIFTEEN_SECONDS","Loading","allowStaleData","PythonErrorInfo","error","NonIdealState","p","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","refetch","marginTop","CursorPaginationControls","INSTANCE_HEALTH_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","BulkActionStatus","REQUESTED","CANCELING","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","filters","token","RunStatus","QUEUED","STARTING","NOT_STARTED","CANCELED","runsPathWithFilters","linkQuery","assetBackfillData","rootAssetTargetedRanges","ranges","default_range","wrap","Detail","detail","ms","Number","showSeconds","Duration","PartitionSelection","numPartitions","rootAssetTargetedPartitions","BackfillStatusTagForPage","assetBackfillStatuses","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","StatusBar","Tag","minWidth","Label","Gray100","Green500","Red500","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","isDialogOpen","setIsDialogOpen","numberFormatter","Dialog","onClose","VirtualizedItemListForDialog","sort","b","compare","renderItem","TruncatedTextWithFullTextOnHover","text","DialogFooter","topBorder","Button","minutes","Math","floor","hours","days","trim","OverviewAssetsRoot","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","assets","groups","assetsOrError","nodes","repositoryName","Object","values","qs","searchQuery","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","grow","selected","TextInput","Container","VirtualHeaderRow","VirtualRow","assetKeys","liveDataByNode","useAssetsLiveData","successful","inprogress","missing","keys","assetLiveData","find","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","LOADING","SOURCE_OBSERVING","SOURCE_OBSERVED","SOURCE_NEVER_OBSERVED","SOURCE_NO_STATE","MATERIALIZING","LATE_OR_FAILED","NEVER_MATERIALIZED","MATERIALIZED","PARTITIONS_FAILED","PARTITIONS_MISSING","PARTITIONS_MATERIALIZED","repo","useViewport","containerProps","viewport","isBatchStillLoading","zeroOrBlank","Cell","fontWeight","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","SelectOnHover","getCount","numMissing","adjective","Gray500","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","numMaterialized","children","Gray900","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","paddingLeft","whiteSpace","textOverflow","partitionCountString","onItemSelect","RepoFilterButton","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","rightIcon","useHourWindow","defaultValue","validate","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","startSec","endSec","RUN_TIMELINE_QUERY","inProgressFilter","_object_spread_props","createdBefore","terminatedFilter","doneStatuses","updatedAfter","tickCursor","ticksUntil","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","min","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","LOOKAHEAD_HOURS","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","visibleJobs","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","useDelayedState","delayMsec","setValue","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","Tooltip","placement","canShow","OverviewJobsTable","repos","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","_param_showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","ScheduleStateRow","element","selectorId","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","onChangeSwitch","jobOriginId","jobSelectorId","lacksPermission","latestTick","toggleOffInFlight","STOPPED","DEFAULT_DISABLED_REASON","Group","spacing","InstigatorSelectorInformation","instigatorState","Gray300","InstigatedRunStatus","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","humanCronString","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","useStaticSetFilter","initialState","allValues","match","getKey","renderLabel","getStringValue","onStateChanged","state","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","useFilters","button","activeFiltersJsx","OVERVIEW_SCHEDULES_QUERY","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","overview_OverviewRoot"],"sourceRoot":""}